apiVersion: scaffolder.backstage.io/v1beta3
kind: Template
metadata:
  name: sample-app-to-rosa-template
  title: Create a Node.js sample application with a CI pipeline for ROSA
  description: Provides the sample code and CI pipeline to build and deploy a sample application on OpenShift. 
  tags:
    - recommended
    - sample-app
    - rosa
spec:
  owner: user:default/skitamura7446
  type: service

  parameters:
    - title: Provide information about the new component
      required:
        - app_name
        - rosa_dest_cluster_name
        - owner
        - system
      properties:
        app_name:
          title: Application Name
          type: string
          default: "rosa-sample-app"
        description:
          title: Description
          type: string
          description: Help others understand what this component is for
        rosa_dest_cluster_name:
          title: ROSA Cluster Name
          description: Name of the ROSA Cluster where the application will be deployed
          type: string
          ui:field: EntityPicker
          ui:options:
            catalogFilter:
              - kind: Component
                spec.type: rosa
            allowedKinds:
            - Component
            defaultKind: Component
            defaultNamespace: default
        owner:
          title: Owner
          type: string
          description: Owner of the component
          ui:field: OwnerPicker
          ui:options:
            catalogFilter:
              kind:
                - Group
        system:
          title: System
          type: string
          ui:field: EntityPicker
          ui:options:
            catalogFilter:
              kind:
                - System
#        cluster_url:
#          title: Cluster URL
#          type: string
#          default: "apps.rosa.sb2366-hcp.qmaa.p3.openshiftapps.com"
        sonarqube_username:
          type: string
          ui:widget: hidden
          default: "admin"
        sonarqube_password:
          type: string
          ui:widget: hidden
          default: "adminadmin"

    - title: Provide information about the git to used
      required:
        - git
        - git_host_url
        - git_owner_name
      properties:
        git:
          title: Git of Destination
          type: string
          description: This action will store the application source code on the selected Git server
          enum:
            - github
            - gitlab
          enumNames:
            - GitHub
            - GitLab
      dependencies:
        git:
          oneOf:
            - properties:
                git:
                  enum:
                    - github
                git_host_url:
                  title: Git Host URL
                  type: string
                  default: github.com
                  description: Specify the GitHub or GitLab host URL(e.g., github.com)
                git_owner_name:
                  title: GitHub Organization Name or User Name
                  type: string
                  description: Specify the GitHub Organization or User to register the repository
                  default: rhdh-skitamura-org
  steps:
    - id: app-template
      name: Generating the Application Source Code Component
      action: fetch:template
      input:
        url: ./app-skeleton
        copyWithoutTemplating:
          - .github/workflows/
        values:
          git: ${{ parameters.git }}
          git_host_url: ${{ parameters.git_host_url }}
          git_owner_name: ${{ parameters.git_owner_name }}
          app_name: ${{ parameters.app_name }}
          owner: ${{ parameters.owner }}
          system: ${{ parameters.system }}
          description: ${{ parameters.description }}
          cluster_url: ${{ parameters.cluster_url }}
        targetPath: ./tenant-app

    - id: app-github-actions-file
      if: ${{ parameters.git == "github" }}
      name: Get GitHub Actions Code
      action: fetch:plain
      input:
        url: ./app-skeleton/.github
        targetPath: ./tenant-app/.github

    - id: publish-app-to-github
      if: ${{ parameters.git == "github" }}
      name: Publish App Repository to GitHub
      action: publish:github
      input:
        repoUrl: ${{ parameters.git_host_url }}?owner=${{ parameters.git_owner_name }}&repo=${{ parameters.app_name }}-app
        repoVisibility: public
        sourcePath: ./tenant-app
        defaultBranch: develop
        protectDefaultBranch: false
        repoVariables:
          APP_NAME: "${{ parameters.app_name }}"
          ROSA_DEST_CLUSTER_NAME: " ${{ parameters.rosa_dest_cluster_name | parseEntityRef | pick('name') }}"

    - id: manifest-template
      name: Generating the K8s Manifest Component
      action: fetch:template
      input:
        url: ./manifest-skeleton
        copyWithoutTemplating:
          - .github/workflows/
        values:
          git: ${{ parameters.git }}
          git_host_url: ${{ parameters.git_host_url }}
          git_owner_name: ${{ parameters.git_owner_name }}
          app_name: ${{ parameters.app_name }}
          owner: ${{ parameters.owner }}
          system: ${{ parameters.system }}
          description: ${{ parameters.description }}
        targetPath: ./tenant-manifest

    - id: manifest-github-actions-file
      if: ${{ parameters.git == "github" }}
      name: Get GitHub Actions Code
      action: fetch:plain
      input:
        url: ./manifest-skeleton/.github
        targetPath: ./tenant-manifest/.github

    - id: publish-manifest-to-github
      if: ${{ parameters.git == "github" }}
      name: Publish Manifest Repository to GitHub
      action: publish:github
      input:
        repoUrl: ${{ parameters.git_host_url }}?owner=${{ parameters.git_owner_name }}&repo=${{ parameters.app_name }}-manifest
        repoVisibility: public
        sourcePath: ./tenant-manifest
        defaultBranch: develop
        protectDefaultBranch: false
        repoVariables:
          APP_NAME: "${{ parameters.app_name }}"
          ROSA_DEST_CLUSTER_NAME: " ${{ parameters.rosa_dest_cluster_name | parseEntityRef | pick('name') }}"

    - id: register-to-github
      if: ${{ parameters.git == "github" }}
      name: Registering the Catalog Info Component to GitHub
      action: catalog:register
      input:
        repoContentsUrl: ${{ steps['publish-app-to-github'].output.repoContentsUrl }}
        catalogInfoPath: "/catalog-info.yaml"

    - id: create-argocd-resources
      name: Create ArgoCD Resources
      action: argocd:create-resources
      input:
        appName: ${{ parameters.app_name }}-bootstrap
        argoInstance: main
        namespace: openshift-gitops
        repoUrl: https://${{ parameters.git_host_url }}/${{ parameters.git_owner_name }}/${{ parameters.app_name }}-manifest.git
        path: 'argocd/'

    - id: create-sonarqube-project
      name: Create Sonarqube Project
      action: sonarqube:create-project
      input:
        baseUrl: http://sonarqube-sonarqube.sonarqube.svc:9000
        name: ${{ parameters.app_name }}
        key: ${{ parameters.app_name }}
        branch: main
        username: ${{ parameters.sonarqube_username }}
        password: ${{ parameters.sonarqube_password }}

  output:
    links:
      - title: Open the Source Code Repository
        if: ${{ parameters.git == "github" }}
        url: ${{ steps['publish-app-to-github'].output.remoteUrl }}
      - title: Open the Catalog Info Component
        if: ${{ parameters.git == "github" }}
        icon: catalog
        entityRef: ${{ steps['register-to-github'].output.entityRef }}
